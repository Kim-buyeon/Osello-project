Index: othelloGame/othello2/GUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package othello2;\r\n// 박관호 수정 3\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\n\r\nimport javax.swing.*;\r\npublic class GUI extends JFrame implements ActionListener {\r\n\tprivate JPanel panel;\r\n\r\n\tprivate JButton[][] buttons;\r\n\t//게임 상태를 나타내는 말 배열\r\n\tprivate Piece[][] board;\r\n\t//게임 로직을 처리하는 객체\r\n\tprivate OthelloGame game;\r\n\tprivate JToolBar toolBar;\r\n\tprivate JLabel blackScoreLabel;\r\n\tprivate JLabel whiteScoreLabel;\r\n\r\n\t//게임 보드의 UI를 초기화.\r\n\t//8x8 그리드 레이아웃으로 버튼을 배치.\r\n\t//각 버튼에 액션 리스너를 추가하고 초기 상태에 따라 색상을 설정.\r\n\tpublic GUI(int level) {\r\n\t\tgame = new OthelloGame(level);\r\n\t\tthis.setBoard(game.getBoard());\r\n\t\tinitUI();\r\n\t\tthis.setVisible(true);\r\n\t}\r\n\r\n\tpublic GUI(Piece[][] board) {\r\n\t\tthis.setBoard(board);\r\n\t\tinitUI();\r\n\t\tthis.setVisible(true);\r\n\t}\r\n\r\n\tpublic void initUI() {\r\n\t\t//게임 보드를 표시할 패널\r\n\t\tpanel = new JPanel();\r\n\r\n\t\tpanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\r\n\t\tpanel.setLayout(new GridLayout(8, 8, 5, 5));\r\n\r\n\t\t//게임 보드의 각 칸을 나타내는 버튼 배열\r\n\t\tthis.buttons = new JButton[8][8];\r\n\r\n\t\tfor (int i = 0; i < this.board.length; i++) {\r\n\t\t\tfor (int j = 0; j < this.board[i].length; j++) {\r\n\t\t\t\tif (this.board[i][j] != null) {\r\n\t\t\t\t\tthis.buttons[i][j] = new JButton(\r\n\t\t\t\t\t\t\tthis.board[i][j].toString());\r\n\t\t\t\t\tpanel.add(this.buttons[i][j]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.buttons[i][j] = new JButton(\".\");\r\n\t\t\t\t\tpanel.add(this.buttons[i][j]);\r\n\t\t\t\t}\r\n\t\t\t\tbuttons[i][j].addActionListener(this);\r\n\t\t\t\tif (buttons[i][j].getText().equals(\"X\"))\r\n\t\t\t\t\tbuttons[i][j].setBackground(Color.BLACK);\r\n\t\t\t\telse if (buttons[i][j].getText().equals(\"O\"))\r\n\t\t\t\t\tbuttons[i][j].setBackground(Color.WHITE);\r\n\t\t\t\telse if (buttons[i][j].getText().equals(\".\"))\r\n\t\t\t\t\tbuttons[i][j].setBackground(new Color(0, 100, 0));\r\n\t\t\t}\r\n\t\t\tpanel.setVisible(true);\r\n\t\t}\r\n\r\n\t\tadd(panel);\r\n\r\n\t\tsetTitle(\"othello1.Othello\");\r\n\t\tsetSize(700, 700);\r\n\t\tsetLocationRelativeTo(null);\r\n\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n\r\n\t\ttoolBar = new JToolBar();\r\n\t\ttoolBar.setFloatable(false);\r\n\r\n\t\tblackScoreLabel = new JLabel(\"흑돌: 2\");\r\n\t\twhiteScoreLabel = new JLabel(\"백돌: 2\");\r\n\r\n\t\ttoolBar.add(blackScoreLabel);\r\n\t\ttoolBar.addSeparator(new Dimension(20, 0));\r\n\t\ttoolBar.add(whiteScoreLabel);\r\n\r\n\t\t// JToolBar를 프레임의 북쪽에 추가\r\n\t\tadd(toolBar, BorderLayout.NORTH);\r\n\t}\r\n\r\n\tpublic void setBoard(Piece[][] board) {\r\n\t\tthis.board = board;\r\n\t}\r\n\r\n\tprivate void updateScore() {\r\n\t\tint blackCount = 0;\r\n\t\tint whiteCount = 0;\r\n\t\tfor (int i = 0; i < 8; i++) {\r\n\t\t\tfor (int j = 0; j < 8; j++) {\r\n\t\t\t\tif (board[i][j] != null) {\r\n\t\t\t\t\tif (board[i][j].toString().equals(\"X\")) {\r\n\t\t\t\t\t\tblackCount++;\r\n\t\t\t\t\t} else if (board[i][j].toString().equals(\"O\")) {\r\n\t\t\t\t\t\twhiteCount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tblackScoreLabel.setText(\"흑돌: \" + blackCount);\r\n\t\twhiteScoreLabel.setText(\"백돌: \" + whiteCount);\r\n\t}\r\n\r\n\t//버튼 클릭 이벤트를 처리.\r\n\t//클릭된 위치를 찾아 humanPart() 메서드를 호출하고, 성공 시 computerPart() 메서드를 호출.\r\n\tpublic void actionPerformed(ActionEvent e) {\r\n\t\tfor (int i = 0; i < buttons.length; i++) {\r\n\t\t\tfor (int j = 0; j < buttons[i].length; j++) {\r\n\t\t\t\tif (buttons[i][j] == e.getSource()) {\r\n\t\t\t\t\tif (humanPart(i, j)) {\r\n\t\t\t\t\t\tupdateScore();\r\n\t\t\t\t\t\tcomputerPart();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//사용자의 턴을 처리.\r\n\t//게임 로직을 통해 움직임의 유효성을 확인하고 보드를 업데이트.\r\n\tpublic boolean humanPart(int i, int j) {\r\n\t\tboolean tf = false;\r\n\t\tif (this.game.humansTurn(i, j))\r\n\t\t\ttf = true;\r\n\t\tsetBoard(game.getBoard());\r\n\t\tthis.printBoardGUI();\r\n\t\tif (game.gameOver()) {\r\n\t\t\tSystem.out.println(\"The game has ended\");\r\n\t\t\tSystem.out.println(game.determineWinner());\r\n\t\t}\r\n\t\tif (!game.humanCanMove() && !game.gameOver()) {\r\n\t\t\tSystem.out.println(\"You can't move! So it's the AI's turn now\");\r\n\t\t}\r\n\r\n\t\treturn tf;\r\n\t}\r\n\r\n\t//컴퓨터의 턴을 처리.\r\n\t//2초 지연 후 컴퓨터의 움직임을 실행하고 보드를 업데이트.\r\n\tpublic void computerPart() {\r\n\t\tThread thread = new Thread() {\r\n\t\t\tpublic void run() {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tThread.sleep(2000);\r\n\t\t\t\t} catch (InterruptedException exception) {\r\n\t\t\t\t\texception.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t\tgame.computersTurn();\r\n\t\t\t\tsetBoard(game.getBoard());\r\n\t\t\t\tprintBoardGUI();\r\n\t\t\t\tupdateScore();\r\n\t\t\t}\r\n\t\t};\r\n\t\tthread.start();\r\n\t\tif (game.gameOver()) {\r\n\t\t\tSystem.out.println(\"The game has ended. \");\r\n\t\t\tSystem.out.println(game.determineWinner());\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//현재 게임 상태에 따라 UI를 업데이트.\r\n\t//각 버튼의 텍스트와 배경색을 설정.\r\n\tpublic void printBoardGUI() {\r\n\t\tfor (int i = 0; i < board.length; i++) {\r\n\t\t\tfor (int j = 0; j < board[i].length; j++) {\r\n\t\t\t\tif (board[i][j] != null)\r\n\t\t\t\t\tbuttons[i][j].setText(board[i][j].toString());\r\n\t\t\t\tif (buttons[i][j].getText().equals(\"X\"))\r\n\t\t\t\t\tbuttons[i][j].setBackground(Color.BLACK);\r\n\t\t\t\telse if (buttons[i][j].getText().equals(\"O\"))\r\n\t\t\t\t\tbuttons[i][j].setBackground(Color.WHITE);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/othelloGame/othello2/GUI.java b/othelloGame/othello2/GUI.java
--- a/othelloGame/othello2/GUI.java	
+++ b/othelloGame/othello2/GUI.java	
@@ -1,5 +1,5 @@
 package othello2;
-// 박관호 수정 3
+// 박관호 수정 4
 import java.awt.*;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
